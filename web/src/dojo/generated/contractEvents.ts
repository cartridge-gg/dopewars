/* Autogenerated file. Do not edit manually. */

import {
  num,
  GetTransactionReceiptResponse,
  InvokeTransactionReceiptResponse,
  SuccessfulTransactionReceiptResponse,
  Contract,
} from "starknet";

export enum WorldEvents {
  Upgraded = "0x2db340e6c609371026731f47050d3976552c89b4fbb012941663841c59d1af3",
  GameCreated = "0x230f942bb2087887c3b1dd964c716614bb6df172214f22409fefb734d96a4d2",
  Traveled = "0x2c4d9d5da873550ed167876bf0bc2ae300ce1db2eeff67927a85693680a2328",
  HighVolatility = "0x5745fc04eae9463f95a8fd2efc3a0ce995c72189f48fc4afcaee0648773f24",
}

export interface BaseEventData {
  game_id: number;
  event_type: WorldEvents;
  event_name: string;
}

export interface GameCreatedData extends BaseEventData {
  game_id: number;
  player_id: string;
  game_mode: String;
}

export interface TraveledData extends BaseEventData {
  game_id: number;
  player_id: string;
  turn: number;
  from_location: String;
  to_location: String;
}

export interface HighVolatilityData extends BaseEventData {
  game_id: number;
  location_id: String;
  drug_id: String;
  increase: boolean;
}

export const parseAllEvents = (receipt: GetTransactionReceiptResponse) => {
  if (receipt.status === "REJECTED") {
    throw new Error(`transaction REJECTED`);
  }
  if (receipt.status === "REVERTED") {
    throw new Error(`transaction REVERTED`);
  }

  const flatEvents = parseEvents(receipt as SuccessfulTransactionReceiptResponse);
  return flatEvents;
};

export const parseEvents = (receipt: SuccessfulTransactionReceiptResponse) => {
  const parsed = receipt.events.map((e) => parseEvent(e));
  return parsed;
};

export type ParseEventResult = ReturnType<typeof parseEvent>;

export const parseEvent = (raw: any) => {
  switch (raw.keys[0]) {
    case WorldEvents.GameCreated:
      return {
        event_type: WorldEvents.GameCreated,
        event_name: "GameCreated",
        game_id: Number(raw.data[0]),
        player_id: num.toHexString(raw.data[1]),
        game_mode: num.toHexString(raw.data[2]),
      } as GameCreatedData;

    case WorldEvents.Traveled:
      return {
        event_type: WorldEvents.Traveled,
        event_name: "Traveled",
        game_id: Number(raw.keys[1]),
        player_id: num.toHexString(raw.keys[2]),
        turn: Number(raw.data[0]),
        from_location: num.toHexString(raw.data[1]),
        to_location: num.toHexString(raw.data[2]),
      } as TraveledData;

    case WorldEvents.HighVolatility:
      return {
        event_type: WorldEvents.HighVolatility,
        event_name: "HighVolatility",
        game_id: Number(raw.keys[1]),
        location_id: num.toHexString(raw.data[0]),
        drug_id: num.toHexString(raw.data[1]),
        increase: raw.data[2] === "0x0" ? false : true,
      } as HighVolatilityData;

    default:
      return {
        gameId: undefined,
        event_type: raw.keys[0],
        event_name: raw.keys[0],
      };
      break;
  }
};
